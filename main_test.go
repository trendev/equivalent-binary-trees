package main

import (
	"testing"

	"golang.org/x/tour/tree"
)

func TestWalk(t *testing.T) {
	k := 3
	max := 10 // max randome value generated by tree.New()
	tr := tree.New(k)
	ch := make(chan int, max)
	Walk(tr, ch)

	if cap(ch) != max {
		t.Errorf("channel's capacity shoud be %d but is %d\n", max, cap(ch))
		t.FailNow()
	}

	for i := 0; i < max; i++ {
		e := (i + 1) * k
		if v := <-ch; v != e {
			t.Errorf("channel's value %d is the expected value %d\n", v, e)
			t.FailNow()
		}
	}

}

func TestSameWithEquivalentTrees(t *testing.T) {
	t1 := tree.New(1)
	t2 := tree.New(1)

	if !Same(t1, t1) {
		t.Errorf("t1 %v should be equal with t1\n", t1)
		t.FailNow()
	}

	if !Same(t1, t2) {
		t.Errorf("t1 %v should equivalent with t2 %v\n", t1, t2)
		t.FailNow()
	}
}

func TestSameWithDifferentTrees(t *testing.T) {
	t1 := tree.New(1)
	t2 := tree.New(1)
	t3 := &tree.Tree{
		Left:  t2,
		Value: 12,
		Right: nil,
	}
	if Same(t1, t3) {
		t.Errorf("t1 %v should be different with t3 %v\n", t1, t3)
		t.FailNow()
	}
}
